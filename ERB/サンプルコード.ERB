@SYSTEM_TITLE
PRINTFORMW ※このサンプルコードでは音が流れます。ご注意ください※
DRAWLINE

CALL COLUMNDIVCREATE, 0

MAX_LINE = 31

STOPSOUND
STOPBGM

SETSOUNDVOLUME 0
SETBGMVOLUME 0

SETBGMVOLUME BGMVOLUME
SETSOUNDVOLUME SOUNDVOLUME

CALL カラム生成, "サンプルコード", "サウンド関連", "ファイル・画像生成1", "ファイル・画像生成2", "フロー制御", "ツールチップ拡張", "divカラム"

@サンプルコード_サウンド関連
CALL COLUMNDIVPRINTL, 0, "□曲、またはサウンド・エフェクトを選んでください"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[1] 主よ、人の望みの喜びよ.mid 作曲:バッハ"
CALL COLUMNDIVPRINTL, 0, "    リファレンス：PLAYBGM \"主よ、人の望みの喜びよ.mid\""
CALL COLUMNDIVPRINTL, 0, "    PLAYBGM命令によるループ再生。WMPライブラリを使用しているのでmidiを再生可能"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[2] メヌエット.mid 作曲:ベートーベン"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:PLAYBGM \"メヌエット.mid\""
CALL COLUMNDIVPRINTL, 0, "    PLAYBGMで曲を被せた場合はそれまで流れてた曲はストップする"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[3] water04.mp3 提供:マッチメイカァズ様"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:PLAYSOUND \"water04.mp3\""
CALL COLUMNDIVPRINTL, 0, "    PLAYSOUND命令は一回の命令で一度のみ再生。SEやボイスなどを流す場合はこっち"
CALL COLUMNDIVPRINTL, 0, "    v12で10チャンネルに対応。最大10個のファイルを同時に再生できる"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[4] water04.mp3 ループ再生"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:PLAYBGM \"water04.mp3\""
CALL COLUMNDIVPRINTL, 0, "    PLAYBGMはループ再生命令なのでSEなども一応ループできる"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[5] BGMをストップする"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:STOPBGM"
CALL COLUMNDIVPRINTL, 0, "    流れているBGMを停止する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, @"[6] BGMの音量を下げる [7] BGMの音量を上げる(現在のボリューム:{BGMVOLUME})"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:SETBGMVOLUME 0～100"
CALL COLUMNDIVPRINTL, 0, "    当コードでのボリューム初期値は50 上のボタンでは10刻みで上げ下げしている"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, @"[8] SOUNDの音量を下げる [9] SOUNDの音量を上げる(現在のボリューム:{SOUNDVOLUME})"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:SETSOUNDVOLUME 0～100"
CALL COLUMNDIVPRINTL, 0, "    仕様はSETBGMVOLUMEと同じ"
CALL COLUMNDIVPRINTL, 0, ""

@サンプルコード_サウンド関連_INPUT
SELECTCASE CRESULT:1
	CASE 1
		PLAYBGM "主よ、人の望みの喜びよ.mid"
	CASE 2
		PLAYBGM "メヌエット.mid"
	CASE 3
		PLAYSOUND "water04.mp3"
	CASE 4
		PLAYBGM "water04.mp3"
	CASE 5
		STOPBGM
	CASE 6
		BGMVOLUME = LIMIT(BGMVOLUME-10, 0, 100)
	CASE 7
		BGMVOLUME = LIMIT(BGMVOLUME+10, 0, 100)
	CASE 8
		SOUNDVOLUME = LIMIT(SOUNDVOLUME-10, 0, 100)
	CASE 9
		SOUNDVOLUME = LIMIT(SOUNDVOLUME+10, 0, 100)
ENDSELECT

@サンプルコード_ファイル・画像生成1
CALL COLUMNDIVPRINTL, 0, "□テキストから画像ファイルを作成できます"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, @"[1] フォント及びフォントスタイルを変更する(現在のフォント:%FONTNAME%)"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:GSETFONT int ID, フォント名, フォントサイズ(%), フォントスタイル(FONTSTYLE同様の4bit数)"
CALL COLUMNDIVPRINTL, 0, "    本家Emueraから存在 EEでフォントスタイルも変更可能に フォントスタイル指定引数は省略可能"
CALL COLUMNDIVPRINTL, 0, @"    [20]太字(\@ GETBIT(STYLE, 0) ? オン # オフ \@) [21]斜体(\@ GETBIT(STYLE, 1) ? オン # オフ \@) [22]打ち消し線(\@ GETBIT(STYLE, 2) ? オン # オフ \@) [23]下線(\@ GETBIT(STYLE, 3) ? オン # オフ \@)"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, @"[2] ブラシと文字色を変更する(現在の設定:%CONVERT(BRUSH, 16)%)"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:GSETBRUSH int ID, cARGB(16進数8桁)"
CALL COLUMNDIVPRINTL, 0, "    本家Emueraから存在"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, @"[3] GDRAWTEXT文字の縁取りの幅と色を変更する(現在の色:%CONVERT(PEN, 16)% 現在の幅:{WIDTH})"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:GSETPEN int ID, cARGB(16進数8桁), 文字幅(%)"
CALL COLUMNDIVPRINTL, 0, "    本家Emueraから存在"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[7] テキストから画像ファイルを生成する"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:GDRAWTEXT int ID, テキスト, X座標, Y座標"
CALL COLUMNDIVPRINTL, 0, "    座標は省略可能"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[8] テキストから画像ファイルを生成した際のサイズを取得"
CALL COLUMNDIVPRINTL, 0, "    リファレンス:GGETTEXTSIZE テキスト, フォント名, フォントサイズ, フォントスタイル"
CALL COLUMNDIVPRINTL, 0, "    フォントスタイルのみ省略可能 ちなみに通常時と太字で画像サイズが異なるため注意"
CALL COLUMNDIVPRINTL, 0, @"    [25]フォントサイズを指定(％) 現在:{FONTSIZE}％"

@サンプルコード_ファイル・画像生成1_INPUT
#DIM DYNAMIC LCOUNT

SELECTCASE CRESULT:1
	CASE 1
		FOR LCOUNT, 0, VARSIZE("FONTLIB")
			SIF CHKFONT(FONTLIB:LCOUNT)
				PRINTFORML [{LCOUNT}] %FONTLIB:LCOUNT%
		NEXT
		DO
			INPUT
			IF CHKFONT(FONTLIB:RESULT)
				FONTNAME = %FONTLIB:RESULT%
				BREAK
			ENDIF
		LOOP 1
	CASE 2
		PRINTL ブラシの値を入力してください
		INPUTS
		SIF ISNUMERIC(RESULTS)
			BRUSH = TOINT(RESULTS)
		BREAK
	CASE 3
		PRINTL [0] 縁取りの色を変更する
		PRINTL [1] 縁取りの幅を変更する
		DO
			INPUT
			SELECTCASE RESULT
				CASE 0
					PRINTL 縁取り色の値を入力してください
					INPUTS
					SIF ISNUMERIC(RESULTS)
						PEN = TOINT(RESULTS)
					BREAK
				CASE 1
					PRINTL 縁取りの幅を入力してください
					INPUT
					WIDTH = RESULT
					BREAK
			ENDSELECT
		LOOP 1
	CASE 7
		PRINTL テキストを入力してください
		INPUTS
		FOR LCOUNT, 1, 6
			GDISPOSE LCOUNT
			GCREATE LCOUNT, 2000, 250
			GSETFONT LCOUNT, FONTNAME, LCOUNT*50, STYLE
			GSETBRUSH LCOUNT, BRUSH
			GSETPEN LCOUNT, PEN, WIDTH
			GDRAWTEXT LCOUNT, RESULTS
			SIZE:LCOUNT:0 = RESULT:1
			SIZE:LCOUNT:1 = RESULT:2
			;PRINTFORML G生成 {RESULT}
			SPRITECREATE @"TEST{LCOUNT}", LCOUNT
			;PRINTFORML SPRITE生成 {RESULT}
			HTML_PRINT @"<img src='TEST{LCOUNT}' srcb='' height='250'>"
			REPEAT 2
				PRINTL 
			REND
		NEXT
		FOR LCOUNT, 1, 6
			PRINTFORML gID{LCOUNT}のフォント:%GGETFONT(LCOUNT)% フォントサイズ:{GGETFONTSIZE(LCOUNT)} 幅:{SIZE:LCOUNT:0} 高さ{SIZE:LCOUNT:1} フォントスタイル:{GGETFONTSTYLE(LCOUNT)}
		NEXT
		WAIT
		FOR LCOUNT, 1, 6
			GDISPOSE LCOUNT
			SPRITEDISPOSE @"TEST{LCOUNT}"
		NEXT
	CASE 8
		PRINTL テキストを入力してください
		INPUTS
		GGETTEXTSIZE RESULTS, FONTNAME, FONTSIZE, STYLE
		PRINTFORML 「%RESULTS%」を%FONTNAME%、サイズ{FONTSIZE}％、FONTSTYLE {STYLE}で画像にした場合の大きさは、
		PRINTFORMW Width:{RESULT:0} Height:{RESULT:1}です
	CASE 20 TO 23
		INVERTBIT STYLE, (CRESULT:1)-20
	CASE 25
		PRINTL フォントサイズを入力してください
		INPUT
		FONTSIZE = RESULT
ENDSELECT

@サンプルコード_ファイル・画像生成2
CALL COLUMNDIVPRINTL, 0, "□ログファイルや画像表示機能の拡張"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[9] ファイル名指定のOUTPUTLOG"
CALL COLUMNDIVPRINTL, 0, "    ファイル名と拡張子を指定できるOUTPUTLOG 引数を省略した場合はemuera.logになる"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[10] resource.csvで指定されたWebP画像を表示する"
CALL COLUMNDIVPRINTL, 0, "     牛を表示するだけ"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[11] GCREATEFROMFILEでWebP画像を表示する"
CALL COLUMNDIVPRINTL, 0, "     動的に牛を表示するだけ"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[12] 5匹の牛を回転させる(左の牛が2回回るまで)"
CALL COLUMNDIVPRINTL, 0, "     リファレンス:GDRAWGWITHROTATE コピー先ID, 回転させるgID, 回転させる角度(時計回り), X座標, Y座標"
CALL COLUMNDIVPRINTL, 0, "     牛が回るだけ X座標とY座標は中心点だが省略可能 省略したら画像の中心(X/2, Y/2)になる"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[13] あなたは赤い部屋が好きですか？"
CALL COLUMNDIVPRINTL, 0, "     GDRAWTEXTとGRAWGWITHROTATEを組み合わせてみる"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[14] カラム生成機能を試す"
CALL COLUMNDIVPRINTL, 0, "     GDRAWTEXTを用いて複数のカラムを制御できるライブラリ。試したあとは再起動される"
CALL COLUMNDIVPRINTL, 0, "     機能の詳細はread me類/read me(COLUMN_LIB).txtを参照"

@サンプルコード_ファイル・画像生成2_INPUT
#DIM DYNAMIC LCOUNT

SELECTCASE CRESULT:1
	CASE 9
		PRINTL ファイル名指定でOUTPUTLOGします ファイル名を入力してください(拡張子込み)
		INPUTS
		OUTPUTLOG RESULTS
		WAIT
	CASE 10
		HTML_PRINT "<img src='cow' height = '500' width = '500'>"
		PRINTL 
		PRINTL 
		PRINTL 
		PRINTL 
		WAIT
	CASE 11
		GDISPOSE 0
		GCREATEFROMFILE 0, "cow.webp"
		SPRITECREATE "dynamic_cow", 0
		HTML_PRINT "<img src='dynamic_cow' height = '500' width = '500'>"
		PRINTL 
		PRINTL 
		PRINTL 
		PRINTL 
		WAIT
		GDISPOSE 0
	CASE 12
		GDISPOSE 0
		GCREATEFROMFILE 0, "cow.webp"

		GCREATE 3, GWIDTH(0), GHEIGHT(0)
		GDRAWGWITHROTATE 3, 0, 0
		PRINTL ループ720回で左から「1°ずつ回転する牛」「3°ずつ回転する牛」
		PRINTL 「20フレームごとにランダムな角度になる牛」「毎フレームランダムな牛」「毎フレーム角度も座標もランダムな牛」
		VARSET ANGLE
		X = 0
		FOR LCOUNT, 0, 720
			GDISPOSE 1
			GCREATE 1, GWIDTH(0), GHEIGHT(0)
			ANGLE:1--
			GDRAWGWITHROTATE 1, 0, ANGLE:1
			SPRITECREATE "dynamic_cow1", 1

			GDISPOSE 2
			GCREATE 2, GWIDTH(0), GHEIGHT(0)
			ANGLE:2 += 3
			GDRAWGWITHROTATE 2, 0, ANGLE:2
			SPRITECREATE "dynamic_cow2", 2

			IF LCOUNT%20 == 0
				GDISPOSE 3
				GCREATE 3, GWIDTH(0), GHEIGHT(0)
				GDRAWGWITHROTATE 3, 0, RAND:360
			ENDIF
			SPRITECREATE "dynamic_cow3", 3

			GDISPOSE 4
			GCREATE 4, GWIDTH(0), GHEIGHT(0)
			GDRAWGWITHROTATE 4, 0, RAND:360
			SPRITECREATE "dynamic_cow4", 4

			GDISPOSE 5
			GCREATE 5, GWIDTH(0), GHEIGHT(0)
			GDRAWGWITHROTATE 5, 0, RAND:360, RAND:GWIDTH(5), RAND:GHEIGHT(5)
			SPRITECREATE "dynamic_cow5", 5

			[SKIPSTART]
			GDISPOSE 6
			GCREATE 6, GWIDTH(0), GHEIGHT(0)
			ANGLE:6--
			GDRAWGWITHROTATE 6, 0, ANGLE:6, GWIDTH(6), GHEIGHT(6)
			SPRITECREATE "dynamic_cow6", 6

			GDISPOSE 7
			GCREATE 7, GWIDTH(0), GHEIGHT(0)
			ANGLE:7--
			GDRAWGWITHROTATE 7, 0, ANGLE:7, GWIDTH(7)/4, GHEIGHT(7)/2
			SPRITECREATE "dynamic_cow7", 7

			GDISPOSE 8
			GCREATE 8, GWIDTH(0), GHEIGHT(0)
			ANGLE:8 += 40
			X++
			SIF X > GWIDTH(8)*2
				X = -GWIDTH(8)*2
			GDRAWGWITHROTATE 8, 0, ANGLE:8, X, GHEIGHT(8)/2
			SPRITECREATE "dynamic_cow8", 8
			[SKIPEND]

			LOCALS = 
			FOR COUNT, 1, 6
				LOCALS += @"<img src='dynamic_cow{COUNT}' height = '500' width = '500'>"
			NEXT
			HTML_PRINT LOCALS
			PRINTL 
			PRINTL 
			PRINTL 
			PRINTL 
			AWAIT 1
			CLEARLINE 5
		NEXT
	CASE 13
		GDISPOSE 0
		GCREATE 0, 4000, 400
		GCLEAR 0, 0xFFFF0000

		GSETFONT 0, "ＭＳ 明朝", 700
		GSETBRUSH 0, 0xFF000000
		GDRAWTEXT 0, "｜", 1600, 0
		GSETFONT 0, "ＭＳ 明朝", 200
		GDRAWTEXT 0, "好きですか？", 2000, 50

		GDISPOSE 1
		GGETTEXTSIZE "あなたは赤い部屋が", "ＭＳ 明朝", 200
		GCREATE 1, RESULT:0+30, 400
		GCLEAR 1, 0xFFFF0000
		GSETFONT 1, "ＭＳ 明朝", 200
		GSETBRUSH 1, 0xFF000000
		GDRAWTEXT 1, "あなたは赤い部屋が", 50, 100

		GDRAWGWITHROTATE 0, 1, -3

		SPRITECREATE "REDROOM", 0
		HTML_PRINT "<nobr><nonbutton pos='1500'><img src='REDROOM' height='500'></nonbutton>"
		PRINTL 
		PRINTL 
		PRINTL 
		PRINTL 
		WAIT
	CASE 14
		CLEARLINE LINECOUNT
		JUMP COLUMN_LIB
ENDSELECT

@サンプルコード_フロー制御
CALL COLUMNDIVPRINTL, 0, "□フロー制御、変数制御"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[0] FORCE_QUITする"
CALL COLUMNDIVPRINTL, 0, "     従来のQUITはQUIT命令が実行されてから入力待ちを挟んでいたが、これは即終了する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[1] QUIT_AND_RESTARTする"
CALL COLUMNDIVPRINTL, 0, "     QUIT同様に入力待ちを挟み再起動する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[2] FORCE_QUIT_AND_RESTARTする"
CALL COLUMNDIVPRINTL, 0, "     FORCE_QUIT同様に即再起動する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[3] FORCE_BEGINを試す"
CALL COLUMNDIVPRINTL, 0, "     強制BEGINでシステム関数を転々とする BEGIN ABLUPから始まる"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[4] ERH変数を名前付きで呼び出す"
CALL COLUMNDIVPRINTL, 0, "    ERB内を見ながら実行してください"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[5] メモリ使用量の確認とメモリ解放を試す(GETMEMORYUSAGE,CLEARMEMORY)"
CALL COLUMNDIVPRINTL, 0, "    キャラを10000人くらい追加して試してみる"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[6] MOUSEB()機能を試す"
CALL COLUMNDIVPRINTL, 0, "    MOUSEX,MOUSEYなどと同様にマウスオーバー中のボタンを取得できる"

@サンプルコード_フロー制御_INPUT
#DIM DYNAMIC CLEARED

SELECTCASE CRESULT:1
	CASE 0
		FORCE_QUIT
	CASE 1
		QUIT_AND_RESTART
	CASE 2
		FORCE_QUIT_AND_RESTART
	CASE 3
		LOOP_BREAK = 1
		BEGIN ABLUP
	CASE 4
		ADDVOIDCHARA
		TARGET = 0
		PRINTFORML HOGE:0={HOGE:0} HOGE:1={HOGE:1} HOGE:2={HOGE:2}
		PRINTFORML BOGE:0={BOGE:0} BOGE:1={BOGE:1} BOGE:2={BOGE:2}
		PRINTFORML HOGES:0=%HOGES:0% HOGES:1=%HOGES:1% HOGES:2=%HOGES:2%
		PRINTFORML CHOGE:0:0={CHOGE:0:0} CHOGE:0:1={CHOGE:0:1} CHOGE:0:2={CHOGE:0:2}
		PRINTFORML HOGE2D:0:1={HOGE2D:0:1} HOGE2D:1:2={HOGE2D:1:2} HOGE2D:2:0={HOGE2D:2:0}
		PRINTFORML HOGE3D:0:1:2={HOGE3D:0:1:2} HOGE3D:1:2:0={HOGE3D:1:2:0} HOGE3D:2:0:1={HOGE3D:2:0:1}
		PRINTW 代入処理を行います
		HOGE:あああ = 12
		HOGE:いいい = 34
		HOGE:ううう = 56

		BOGE:あああ = 1122
		BOGE:いいい = 3344
		BOGE:ううう = 5566

		HOGES:かかか = ABC
		HOGES:ききき = DEF
		HOGES:くくく = GHI

		CHOGE:AAA = 123
		CHOGE:BBB = 456
		CHOGE:CCC = 789
		
		HOGE2D:あああ:ききき = 1234
		HOGE2D:いいい:くくく = 3456
		HOGE2D:ううう:かかか = 5678
		
		HOGE3D:あああ:ききき:すすす = 987
		HOGE3D:いいい:くくく:さささ = 654
		HOGE3D:ううう:かかか:ししし = 321

		PRINTFORML HOGE:0={HOGE:あああ} HOGE:1={HOGE:いいい} HOGE:2={HOGE:ううう}
		PRINTFORML BOGE:0={BOGE:あああ} BOGE:1={BOGE:いいい} BOGE:2={BOGE:ううう}
		PRINTFORML HOGES:0=%HOGES:かかか% HOGES:1=%HOGES:ききき% HOGES:2=%HOGES:くくく%
		PRINTFORML CHOGE:0:0={CHOGE:0:AAA} CHOGE:0:1={CHOGE:0:BBB} CHOGE:0:2={CHOGE:0:CCC}
		PRINTFORML HOGE2D:0:1={HOGE2D:0:1} HOGE2D:1:2={HOGE2D:1:2} HOGE2D:2:0={HOGE2D:2:0}
		PRINTFORMW HOGE3D:0:1:2={HOGE3D:0:1:2} HOGE3D:1:2:0={HOGE3D:1:2:0} HOGE3D:2:0:1={HOGE3D:2:0:1}

		VARSET HOGE
		VARSET BOGE
		VARSET HOGES
		VARSET HOGE2D
		VARSET HOGE3D
		DELCHARA 0
	CASE 5
		PRINTFORMW 現在のメモリ使用量は{GETMEMORYUSAGE()/1024/1024}MBです まずADDVOIDCHARAでキャラを10000人追加します
		REPEAT 10000
			ADDVOIDCHARA
		REND
		PRINTFORMW 現在のメモリ使用量は{GETMEMORYUSAGE()/1024/1024}MBです
		PRINTW キャラを全員消します
		DELALLCHARA
		PRINTFORMW 現在のメモリ使用量は{GETMEMORYUSAGE()/1024/1024}MBです クリックするとメモリ解放を行います
		CLEARED = CLEARMEMORY()
		PRINTFORMW CLEARMEMORY()で{CLEARED/1024/1024}MBのメモリを解放しました 現在のメモリ使用量は{GETMEMORYUSAGE()/1024/1024}MBです
	CASE 6
		CALL MOUSEBTEST
ENDSELECT

@サンプルコード_ツールチップ拡張
TOOLTIP_CUSTOM TCUSTOM
TOOLTIP_SETCOLOR TCOLOR, TBGCOLOR
TOOLTIP_SETFONT TFONT
TOOLTIP_SETFONTSIZE TFONTSIZE
TOOLTIP_FORMAT TFORMAT

CALL COLUMNDIVPRINTL, 0, "□ツールチップ機能を拡張する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[0] ツールチップ拡張を切り替える"
CALL COLUMNDIVPRINTL, 0, @"　　現在:\@ TCUSTOM ? 有効 # 無効 \@"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[1] ツールチップの文字色を変更する"
CALL COLUMNDIVPRINTL, 0, @"　　現在の文字色:%CONVERT(TCOLOR, 16)%"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[2] ツールチップの背景色を変更する"
CALL COLUMNDIVPRINTL, 0, @"　　現在の背景色:%CONVERT(TBGCOLOR, 16)%"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[3] ツールチップのフォントを変更する"
CALL COLUMNDIVPRINTL, 0, @"　　現在のフォント:%TFONT%"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[4] ツールチップのフォントサイズを変更する"
CALL COLUMNDIVPRINTL, 0, @"　　現在のフォントサイズ:{TFONTSIZE}"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[5] ツールチップの表示フォーマットを変更する"
CALL COLUMNDIVPRINTL, 0, @"　　現在のフォーマット:{TFORMAT}"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[6] ツールチップの内容を変更する"
CALL COLUMNDIVPRINTL, 0, @"　　現在の内容:%HTML_ESCAPE(TOOLTIP_TITLE)%"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, @"<nonbutton title='%TOOLTIP_TITLE%'>ここにマウスオーバーでツールチップを表示</nonbutton>"

@サンプルコード_ツールチップ拡張_INPUT
#DIM DYNAMIC LCOUNT
SELECTCASE CRESULT:1
	CASE 0
		INVERTBIT TCUSTOM, 0
	CASE 1
		PRINTL 文字色を数値で入力してください
		INPUTS
		SIF ISNUMERIC(RESULTS)
			TCOLOR = TOINT(RESULTS)
	CASE 2
		PRINTL 背景色を数値で入力してください
		INPUTS
		SIF ISNUMERIC(RESULTS)
			TBGCOLOR = TOINT(RESULTS)
	CASE 3
		FOR LCOUNT, 0, VARSIZE("FONTLIB")
			SIF CHKFONT(FONTLIB:LCOUNT)
				PRINTFORML [{LCOUNT}] %FONTLIB:LCOUNT%
		NEXT
		DO
			INPUT
			IF CHKFONT(FONTLIB:RESULT)
				TFONT = %FONTLIB:RESULT%
				BREAK
			ENDIF
		LOOP 1
	CASE 4
		PRINTL フォントサイズを入力してください
		INPUT
		TFONTSIZE = RESULT
	CASE 5
		PRINTL テキストフォーマットを入力してください(例:1=中央揃え 2=左揃え)
		INPUT
		TFORMAT = RESULT
	CASE 6
		PRINTL ツールチップの内容を入力してください(<br>タグで改行可能)
		INPUTS
		SIF RESULTS != ""
			TOOLTIP_TITLE = %RESULTS%
ENDSELECT


@サンプルコード_divカラム
CALL COLUMNDIVPRINTL, 0, "□当サンプルコードで使用しているカラムレイアウトの変更等"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[0] カラムの背景色を変更する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[1] ボーダー(枠線)の太さを変更する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[2] ボーダー(枠線)の色を変更する"
CALL COLUMNDIVPRINTL, 0, ""
CALL COLUMNDIVPRINTL, 0, "[3] RADIUS(角の丸み)を変更する"

@サンプルコード_divカラム_INPUT

SELECTCASE CRESULT:1
	CASE 0
		PRINTL 色を数値で入力してください
		INPUTS
		SIF ISNUMERIC(RESULTS)
			CALL COLUMNDIVBGCOLOR, 0, TOINT(RESULTS)
	CASE 1
		PRINTL 太さを入力してください(px)
		INPUT
		CALL COLUMNDIVBORDER, 0, RESULT
	CASE 2
		PRINTL 枠線の色を数値で入力してください
		INPUTS
		SIF ISNUMERIC(RESULTS)
			CALL COLUMNDIVBCOLOR, 0, TOINT(RESULTS)
	CASE 3
		PRINTL RADIUSを数値で入力してください(px)
		INPUT
		CALL COLUMNDIVRADIUS, 0, RESULT
ENDSELECT


@SHOW_JUEL
DRAWLINE
PRINTL @SHOW_JUEL
PRINTL 「BEGIN ABLUP」を実行しました。@SYSTEM_TITLEからCALLされてる関数内で実行したため、問題なくBEGINが使えます
PRINTL 現在は@SHOW_JUEL関数内に居ますが、これは表示用のシステム関数のため、BEGINは実行できずエラーとなります
PRINTW なのでFORCE_BEGINを使いSHOP画面に遷移してみます

FORCE_BEGIN SHOP

@EVENTSHOP
DRAWLINE
PRINTL @EVENTSHOP
PRINTL 「FORCE_BEGIN SHOP」が実行されました。EVENTSHOPは「BEGIN SHOP」が実行された際に、@SHOW_SHOPの前に呼ばれる関数です
PRINTL なお、@EVENTSHOPが存在しない場合は、無視してSHOW_SHOPに入ります
PRINTW @EVENTSHOP内ではBEGINが使えますが、ここは何もせずに@SHOW_SHOPに繋げます

@SHOW_SHOP
DRAWLINE
PRINTL @SHOW_SHOP
PRINTL 現在の@SHOW_SHOP関数も@SHOW_JUEL同様に表示用のシステム関数のため、BEGINは実行できません
PRINTW 次は「FORCE_BEGIN TURNEND」を実行してみます

FORCE_BEGIN TURNEND

@EVENTTURNEND
DRAWLINE
PRINTL @EVENTTURNEND
PRINTL 「FORCE_BEGIN TURNEND」が実行され、@EVENTTURNENDに入りました
PRINTL この関数はBEGINで他の処理に繋げることを前提とした関数のため、BEGINが使えます
PRINTW 「BEGIN TITLE」を実行して起動時の画面に戻ります。なお、「BEGIN TITLE」のみFORCE_BEGINを使わずとも常時実行可能です

BEGIN TITLE

@MOUSEBTEST
#DIM DYNAMIC LCOUNT
{
#DIMS DYNAMIC カウンター名 = 
"RED",
"DEEPSKYBLUE",
"YELLOW",
"GREEN",
"WHITE",
}

#DIM DYNAMIC カウンター, 100

#DIMS DYNAMIC マウスオーバー
#DIMS DYNAMIC BAR作成済み, 100
#DIMS DYNAMIC LASTM

CLEARLINE LINECOUNT

PRINTFORML □好きな色を選んでください 押すたびにカウントされます
FOR LCOUNT, 0, VARSIZE("カウンター名")
	SIF ISNUMERIC(マウスオーバー) && TOINT(マウスオーバー) == LCOUNT
		SETCOLORBYNAME yellow
	PRINTFORM 　[{LCOUNT}] %カウンター名:LCOUNT, 12% 
	RESETCOLOR
	SIF BAR作成済み:LCOUNT == ""
		BAR作成済み:LCOUNT = %IMGTOTAG(@"%GBAR(カウンター:LCOUNT, 100, 30, @"%カウンター名:LCOUNT%", "gray", @"{カウンター:LCOUNT} \@ カウンター:LCOUNT >= 100 ? COUNTERSTOP #\@", "black")%")%
	HTML_PRINT BAR作成済み:LCOUNT, 1
	PRINTL 
NEXT

DRAWLINE
PRINTL □説明
PRINT 　

IF ISNUMERIC(マウスオーバー) && INRANGE(TOINT(マウスオーバー), 0, VARSIZE("カウンター名")-1)
	SETCOLOR COLOR_FROMNAME(カウンター名:TOINT(マウスオーバー))
	PRINTFORM %カウンター名:TOINT(マウスオーバー)%:0x%CONVERT(COLOR_FROMNAME(カウンター名:TOINT(マウスオーバー)), 16)% 
	SELECTCASE カウンター名:TOINT(マウスオーバー)
		CASE "RED"
			PRINT トマトなどの色
		CASE "DEEPSKYBLUE"
			PRINT 空の色
		CASE "YELLOW"
			PRINT 黄色信号の色
		CASE "GREEN"
			PRINT 葉っぱの色
		CASE "WHITE"
			PRINT 牛乳の色
	ENDSELECT
	RESETCOLOR
ENDIF
PRINTL 

DRAWLINE

SIF ISNUMERIC(マウスオーバー) && TOINT(マウスオーバー) == 100
	SETCOLORBYNAME yellow
PRINTL [100] 戻る
RESETCOLOR

REDRAW 3
DO
	AWAIT 1
	マウスオーバー = %MOUSEB()%
	IF LASTM != MOUSEB()
		LASTM = %MOUSEB()%
		RESTART
	ENDIF
	LASTM = %MOUSEB()%
	;TRIGGEREDで拾えるのかなと思ったけどちゃんと拾えるのでよし PCスペック次第で拾えない可能性あり？
	IF GETKEYTRIGGERED(0x01) && ISNUMERIC(マウスオーバー)
		RESULT = TOINT(マウスオーバー)
		BREAK
	ENDIF
LOOP 1

VARSET BAR作成済み

SELECTCASE RESULT
	CASE 0 TO VARSIZE("カウンター名")-1
		カウンター:RESULT++
		RESTART
	CASE 100
		RETURN
ENDSELECT

;;;GIDとスプライトを全部DISPOSEする
@GIDDEL
#DIM DYNAMIC LCOUNT
FOR LCOUNT, 0, 8192
	GDISPOSE LCOUNT
NEXT

SPRITEDISPOSEALL 0

;;;グラフィカルなBAR画像を作成
@GBAR, VAL, MAXVAL, LENGTH, COLOR, BGCOLOR, TEXT, TEXTCOLOR
#FUNCTIONS
#DIM DYNAMIC VAL
#DIM DYNAMIC MAXVAL
#DIM DYNAMIC LENGTH
#DIM DYNAMIC GID
#DIMS DYNAMIC COLOR
#DIMS DYNAMIC BGCOLOR
#DIM DYNAMIC LWIDTH
#DIM DYNAMIC HEIGHT
#DIM DYNAMIC PX
#DIMS DYNAMIC TEXT
#DIMS DYNAMIC TEXTCOLOR

DO
	SIF !GCREATED(GID)
		BREAK
	GID++
	SIF GID >= 8192
		THROW GID全部埋まってる
LOOP 1

;フォントサイズと1行の高さが同じだと繋がってしまうので少し減らす
IF GETCONFIG("フォントサイズ") == GETCONFIG("一行の高さ")
	GCREATE GID, GETCONFIG("フォントサイズ")*LENGTH, GETCONFIG("フォントサイズ")-4
ELSE
	GCREATE GID, GETCONFIG("フォントサイズ")*LENGTH, GETCONFIG("フォントサイズ")
ENDIF

IF ISNUMERIC(BGCOLOR)
	GCLEAR GID, TOINT(BGCOLOR)+0xFF000000
ELSE
	GCLEAR GID, COLOR_FROMNAME(BGCOLOR)+0xFF000000
ENDIF

;VALとMAXVALとLENGTHからどのピクセルまで塗るか計算する
;VAL >= MAXVALなら全部
IF VAL >= MAXVAL
	PX = __INT_MAX__
ELSE
	PX = LENGTH*10000/MAXVAL*VAL*GETCONFIG("フォントサイズ")/10000
ENDIF

FOR LWIDTH, 0, GWIDTH(GID)
	FOR HEIGHT, 0, GHEIGHT(GID)
		;まさかCOLORとBGCOLORの書式を統一しないやつはいないだろう
		IF ISNUMERIC(COLOR)
			SIF PX > LWIDTH
				GSETCOLOR GID, TOINT(COLOR)+0xFF000000, LWIDTH, HEIGHT
		ELSE
			SIF PX > LWIDTH
				GSETCOLOR GID, COLOR_FROMNAME(COLOR)+0xFF000000, LWIDTH, HEIGHT
		ENDIF
	NEXT
NEXT

IF TEXT != ""
	IF TEXTCOLOR != ""
		IF ISNUMERIC(TEXTCOLOR)
			GSETBRUSH GID, TOINT(TEXTCOLOR)+0xFF000000
		ELSE
			GSETBRUSH GID, COLOR_FROMNAME(TEXTCOLOR)+0xFF000000
		ENDIF
	ELSE
		GSETBRUSH GID, GETCOLOR()+0xFF000000
	ENDIF
	GSETPEN GID, 0, 0
	GSETFONT GID, "ＭＳ ゴシック", GHEIGHT(GID)
	GDRAWTEXT GID, TEXT
ENDIF

SPRITECREATE @"GBAR{GID}", GID

RETURNF @"GBAR{GID}"

;;;画像名をHTMLタグに整形するだけ
@IMGTOTAG, ARGS
#FUNCTIONS
RETURNF @"<img src='%ARGS%' srcb=''>"

